package main;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class Option {
    public static Map<String, Object> token = new HashMap<>();
    // ((//.*?(\n|$))|(/\*.*?\*/))|([a-zA-Z_][a-zA-Z0-9_]*)|(\d+)|("((\\")|.)*?")|(\+\+|--|\+=|-\+|\*=|/=|&&|\|\||!=|==|>=|<=)|(\{|\}|\[|\]|\(|\)|\+|\-|\*|/|=|&|\||!|:|;|,|<|>|'|\"|\.)|(\b)
    public static String regex = "((//.*?(\\n|$))|(/\\*.*?\\*/))|([a-zA-Z_][a-zA-Z0-9_]*)|(\\d+)|(\"((\\\\\")|.)*?\")|(\\+\\+|--|\\+=|-\\+|\\*=|/=|&&|\\|\\||!=|==|>=|<=)|(\\{|\\}|\\[|\\]|\\(|\\)|\\+|\\-|\\*|/|=|&|\\||!|:|;|,|<|>|'|\\\"|\\.)|(\\b)";


    public static String[] wenfa = new String[]{
            "<函数定义>-><修饰词闭包> <类型> <变量> ( <参数声明> ) { <函数块> }",
            "<修饰词闭包>-><修饰词> <修饰词闭包>|@",
            "<修饰词>->public|private|protected",
            "<类型>->int <取地址>|char <取地址>|boolean <取地址>|void <取地址>",
            "<取地址>-><星号> <取地址>|@",
            "<星号>->*",
            "<变量>-><标志符> <数组下标>",
            "<标志符>->id",
            "<数组下标>->[ <因式> ]|@",
            "<因式>->( <表达式> )|<变量>|<数字>",
            "<数字>->digit",
            "<表达式>-><因子> <项>",
            "<因子>-><因式> <因式递归>",
            "<因式递归>->* <因式> <因式递归>|/ <因式> <因式递归>|@",
            "<项>->+ <因子> <项>|- <因子> <项>|@",
            "<参数声明>-><声明> <声明闭包>|@",
            "<声明>-><修饰词闭包> <类型> <变量> <赋初值>",
            "<赋初值>->= <右值>|@",
            "<右值>-><表达式>|{ <多个数据> }",
            "<多个数据>-><数字> <数字闭包>",
            "<数字闭包>->, <数字> <数字闭包>|@",
            "<声明闭包>->, <声明> <声明闭包>|@",
            "<函数块>-><声明语句闭包> <函数块闭包>",
            "<声明语句闭包>-><声明语句> <声明语句闭包>|@",
            "<声明语句>-><声明> ;",
            "<函数块闭包>-><赋值函数> <函数块闭包>|<for循环> <函数块闭包>|<条件语句> <函数块闭包>|<函数返回> <函数块闭包>|@",
            "<赋值函数>-><变量> <赋值或函数调用>",
            "<赋值或函数调用>->= <右值> ;|( <参数列表> ) ;",
            "<参数列表>-><参数> <参数闭包>",
            "<参数闭包>->, <参数> <参数闭包>|@",
            "<参数>-><标志符>|<数字>|<字符串>",
            "<字符串>->string",
            "<for循环>->for ( <赋值函数> <逻辑表达式> ; <后缀表达式> ) { <函数块> }",
            "<逻辑表达式>-><表达式> <逻辑运算符> <表达式>",
            "<逻辑运算符>-><|>|==|!=",
            "<后缀表达式>-><变量> <后缀运算符>",
            "<后缀运算符>->++|--",
            "<条件语句>->if ( <逻辑表达式> ) { <函数块> } <否则语句>",
            "<否则语句>->else { <函数块> }|@",
            "<函数返回>->return <因式> ;"
    };
    public static List<String> keywords = Arrays.asList("if", "else", "do", "while", "int", "float", "double", "long", "char", "bool", "return", "for",
            "public", "void", "private", "protected");

    static {
        //0-51
        token.put("S", new String[]{
                //    0   ,  1  ,  2  , 3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,  10 ,  11 ,  12 ,  13 ,  14 ,  15 ,  16  ,  17 , 18 ,
                "start", "id", "digit", "W", "ASG", "+", "++", "ADE", "-", "--", "SUE", "*", "CAE", "/", "DIE", "BAND", "AND", "BOR", "OR",
                //    19  , 20  ,   21 ,  22  ,  23  ,   24 ,   25 ,   26 ,  27 ,  28 ,  29 ,  30 ,   31 ,  32 ,   33 ,  34  , 35, 36,
                "!", "NE", ">", ">=", "<", "<=", "(", ")", "{", "}", "[", "]", ";", "string", ".", "ANNO", "W35", "W36",
                //   37 , 38 , 39  ,  40 ,   41,  42 ,  43  ,   44 , 45  ,  46 ,  47 ,  48   ,   49  ,   50 , 51
                "W37", "=", "OCT", "HEX", "digit", "W42", "FNUM", "SNUM", "W45", "W46", "W47", "SPACE", "ENTER", "==", ","
        });
        // 0-29
        token.put("I", new String[][]{
                {"1", "2", "3", "4", "5", "6", "7"},
                {"G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "Y", "Z", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "y", "z", "_"},
                {":"}, {"="}, {"+"}, {"-"}, {"*"}, {"/"}, {"&"}, {"|"}, {"!"}, {">"}, {"<"}, {"{"}, {"}"}, {"("}, {")"}, {"["}, {"]"}, {";"}, {"\""}, {"."},
                {"0"}, {"8", "9"}, {"A", "B", "C", "D", "F", "a", "b", "c", "d", "f"}, {"x", "X"}, {"e", "E"}, {" "}, {","}, {"\n"}
        });
        token.put("T", new int[][]{
                {2, 1, 3, 38, 5, 8, 11, 13, 15, 17, 19, 21, 23, 27, 28, 25, 26, 29, 30, 31, 35, 33, 41, 2, 1, 1, 1, 48, 51, 49},
                {1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, -1, -1, -1},
                {2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 2, 2, -1, -1, 46, -1, -1, -1},
                {-1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, 7, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, 10, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, 14, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32, 35, 35, 35, 35, 35, 35, -1, -1, -1},
                {36, 36, 36, 36, 36, 36, 37, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, -1, -1},
                {36, 36, 36, 36, 36, 36, 37, 34, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, -1, -1},
                {-1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1},
                {40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 40, 40, -1, 40, -1, -1, -1},
                {39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1},
                {40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 40, -1, 40, -1, -1, -1},
                {43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 43, -1, -1, 46, -1, -1, -1},
                {44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 44, -1, -1, -1, -1, -1, -1},
                {43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 43, -1, -1, -1, -1, -1, -1},
                {44, -1, -1, -1, 47, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 44, -1, -1, -1, -1, -1, -1},
                {44, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 44, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
                {-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
        });
        token.put("SS", 0);
        token.put("FS", new Integer[]{1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 39, 40, 41, 43, 44, 48, 49, 50, 51});
    }
}